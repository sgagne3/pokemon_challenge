{"version":3,"sources":["ExportToExcel.min__45edc409d97327d59af1.js","./src/ui/ExportToExcel/ExportToExcel.ts"],"names":["webpackJsonpCoveo__temporary","250","module","exports","__webpack_require__","fn","createAnchor","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","defineProperty","value","document","createElement","element","options","bindings","_window","ExportToExcel","ID","window","ComponentOptions","initComponentOptions","bind","onRootElement","SettingsEvents","settingsPopulateMenu","args","menuData","push","text","l","className","tooltip","onOpen","download","svgIcon","SVGIcons","icons","dropdownExport","svgIconClassName","_this","query","buildExcelQuery","logger","debug","endpoint","queryController","getEndpoint","usageAnalytics","logCustomEvent","analyticsActionCauseList","exportToExcel","fetchBinary","then","content","downloadExcelFile","getLastQuery","_","omit","fieldsToInclude","format","numberOfResults","blob","Blob","type","url","URL","createObjectURL","a","href","buildExcelFileName","click","revokeObjectURL","utc","moment","root","get","SearchInterface","getBindings","doExport","exportGlobally","buildNumberOption","defaultValue","min","buildFieldsOption","Component","Initialization","registerAutoCreateComponent","607"],"mappings":"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","file":"ExportToExcel.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([70],{\n\n/***/ 250:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar SettingsEvents_1 = __webpack_require__(53);\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\nvar Initialization_1 = __webpack_require__(2);\nvar Strings_1 = __webpack_require__(6);\nvar _ = __webpack_require__(0);\nvar GlobalExports_1 = __webpack_require__(3);\n__webpack_require__(607);\nvar SVGIcons_1 = __webpack_require__(12);\nvar SearchInterface_1 = __webpack_require__(19);\nvar RegisteredNamedMethods_1 = __webpack_require__(30);\nvar moment = __webpack_require__(140);\nvar createAnchor = function () { return document.createElement('a'); };\nfunction setCreateAnchor(fn) {\n    createAnchor = fn;\n}\nexports.setCreateAnchor = setCreateAnchor;\n/**\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\n * search results to the Microsoft Excel format (.xlsx).\n *\n * @availablesince [November 2015 Release (v1.0.139)](https://docs.coveo.com/en/289/#november-2015-release-v10139)\n */\nvar ExportToExcel = /** @class */ (function (_super) {\n    __extends(ExportToExcel, _super);\n    /**\n     * Creates a new ExportToExcel component.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the ExportToExcel component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     * @param _window The global Window object (used to download the Excel link).\n     */\n    function ExportToExcel(element, options, bindings, _window) {\n        var _this = _super.call(this, element, ExportToExcel.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.bindings = bindings;\n        _this._window = _window;\n        _this._window = _this._window || window;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ExportToExcel, options);\n        _this.bind.onRootElement(SettingsEvents_1.SettingsEvents.settingsPopulateMenu, function (args) {\n            args.menuData.push({\n                text: Strings_1.l('ExportToExcel'),\n                className: 'coveo-export-to-excel',\n                tooltip: Strings_1.l('ExportToExcelDescription'),\n                onOpen: function () { return _this.download(); },\n                svgIcon: SVGIcons_1.SVGIcons.icons.dropdownExport,\n                svgIconClassName: 'coveo-export-to-excel-svg'\n            });\n        });\n        return _this;\n    }\n    /**\n     * Downloads the Excel representation of the current query.\n     *\n     * Also logs an `exportToExcel` event in the usage analytics.\n     */\n    ExportToExcel.prototype.download = function () {\n        var _this = this;\n        var query = this.buildExcelQuery();\n        this.logger.debug(\"Performing query following 'Export to Excel' click\");\n        var endpoint = this.queryController.getEndpoint();\n        this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.exportToExcel, {}, this.element);\n        endpoint.fetchBinary(query).then(function (content) { return _this.downloadExcelFile(content); });\n    };\n    ExportToExcel.prototype.buildExcelQuery = function () {\n        var query = this.queryController.getLastQuery();\n        query = _.omit(query, ['numberOfResults', 'fieldsToInclude']);\n        if (this.options.fieldsToInclude) {\n            query.fieldsToInclude = this.options.fieldsToInclude;\n        }\n        return __assign({}, query, { format: 'xlsx', numberOfResults: this.options.numberOfResults });\n    };\n    ExportToExcel.prototype.downloadExcelFile = function (content) {\n        var blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        var url = URL.createObjectURL(blob);\n        var a = createAnchor();\n        a.href = url;\n        a.download = this.buildExcelFileName();\n        a.click();\n        URL.revokeObjectURL(url);\n    };\n    ExportToExcel.prototype.buildExcelFileName = function () {\n        var utc = moment().utc();\n        var year = utc.format('YYYY');\n        var month = utc.format('MM');\n        var day = utc.format('DD');\n        var hour = utc.format('HH');\n        var minute = utc.format('mm');\n        var second = utc.format('ss');\n        return \"query--\" + year + \"-\" + month + \"-\" + day + \"--\" + hour + \"-\" + minute + \"-\" + second + \".xlsx\";\n    };\n    ExportToExcel.create = function (element, options, root) {\n        return new ExportToExcel(element, options, RegisteredNamedMethods_1.get(root, SearchInterface_1.SearchInterface).getBindings());\n    };\n    ExportToExcel.ID = 'ExportToExcel';\n    ExportToExcel.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            ExportToExcel: ExportToExcel\n        });\n    };\n    /**\n     * The options for the ExportToExcel\n     * @componentOptions\n     */\n    ExportToExcel.options = {\n        /**\n         * Specifies the number of results to include in the resulting Excel file.\n         *\n         * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\n         * value. However, this amount of time will increase exponentially as you set the value higher.\n         *\n         * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\n         *\n         * Default value is `100`. Minimum value is `1`.\n         *\n         * @availablesince [February 2016 Release (v1.0.318)](https://docs.coveo.com/en/309/#february-2016-release-v10318)\n         */\n        numberOfResults: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\n        /**\n         * Specifies the fields to include in the CSV output.\n         *\n         * Note that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.\n         *\n         * Default value is `undefined`, meaning all fields will be exported.\n         */\n        fieldsToInclude: ComponentOptions_1.ComponentOptions.buildFieldsOption()\n    };\n    return ExportToExcel;\n}(Component_1.Component));\nexports.ExportToExcel = ExportToExcel;\nInitialization_1.Initialization.registerAutoCreateComponent(ExportToExcel);\n\n\n/***/ }),\n\n/***/ 607:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// ExportToExcel.min__45edc409d97327d59af1.js","import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IFieldOption } from '../Base/IComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { SettingsEvents } from '../../events/SettingsEvents';\nimport { ISettingsPopulateMenuArgs } from '../Settings/Settings';\nimport { IAnalyticsNoMeta, analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\nimport { Initialization } from '../Base/Initialization';\nimport { l } from '../../strings/Strings';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_ExportToExcel';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { SearchInterface } from '../SearchInterface/SearchInterface';\nimport { get } from '../Base/RegisteredNamedMethods';\nimport * as moment from 'moment';\nimport { IQuery } from '../../rest/Query';\n\nlet createAnchor = () => document.createElement('a');\n\nexport function setCreateAnchor(fn: () => HTMLAnchorElement) {\n  createAnchor = fn;\n}\n\nexport interface IExportToExcelOptions {\n  numberOfResults?: number;\n  fieldsToInclude?: IFieldOption[];\n}\n\n/**\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\n * search results to the Microsoft Excel format (.xlsx).\n *\n * @availablesince [November 2015 Release (v1.0.139)](https://docs.coveo.com/en/289/#november-2015-release-v10139)\n */\nexport class ExportToExcel extends Component {\n  static ID = 'ExportToExcel';\n\n  static doExport = () => {\n    exportGlobally({\n      ExportToExcel: ExportToExcel\n    });\n  };\n\n  /**\n   * The options for the ExportToExcel\n   * @componentOptions\n   */\n  static options: IExportToExcelOptions = {\n    /**\n     * Specifies the number of results to include in the resulting Excel file.\n     *\n     * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\n     * value. However, this amount of time will increase exponentially as you set the value higher.\n     *\n     * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\n     *\n     * Default value is `100`. Minimum value is `1`.\n     *\n     * @availablesince [February 2016 Release (v1.0.318)](https://docs.coveo.com/en/309/#february-2016-release-v10318)\n     */\n    numberOfResults: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\n    /**\n     * Specifies the fields to include in the CSV output.\n     *\n     * Note that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.\n     *\n     * Default value is `undefined`, meaning all fields will be exported.\n     */\n    fieldsToInclude: ComponentOptions.buildFieldsOption()\n  };\n\n  /**\n   * Creates a new ExportToExcel component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the ExportToExcel component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param _window The global Window object (used to download the Excel link).\n   */\n  constructor(\n    public element: HTMLElement,\n    public options: IExportToExcelOptions,\n    public bindings?: IComponentBindings,\n    public _window?: Window\n  ) {\n    super(element, ExportToExcel.ID, bindings);\n    this._window = this._window || window;\n    this.options = ComponentOptions.initComponentOptions(element, ExportToExcel, options);\n    this.bind.onRootElement(SettingsEvents.settingsPopulateMenu, (args: ISettingsPopulateMenuArgs) => {\n      args.menuData.push({\n        text: l('ExportToExcel'),\n        className: 'coveo-export-to-excel',\n        tooltip: l('ExportToExcelDescription'),\n        onOpen: () => this.download(),\n        svgIcon: SVGIcons.icons.dropdownExport,\n        svgIconClassName: 'coveo-export-to-excel-svg'\n      });\n    });\n  }\n\n  /**\n   * Downloads the Excel representation of the current query.\n   *\n   * Also logs an `exportToExcel` event in the usage analytics.\n   */\n  public download() {\n    const query = this.buildExcelQuery();\n    this.logger.debug(\"Performing query following 'Export to Excel' click\");\n\n    const endpoint = this.queryController.getEndpoint();\n    this.usageAnalytics.logCustomEvent<IAnalyticsNoMeta>(analyticsActionCauseList.exportToExcel, {}, this.element);\n\n    endpoint.fetchBinary(query).then(content => this.downloadExcelFile(content));\n  }\n\n  private buildExcelQuery(): IQuery {\n    let query = this.queryController.getLastQuery();\n    query = _.omit(query, ['numberOfResults', 'fieldsToInclude']);\n\n    if (this.options.fieldsToInclude) {\n      query.fieldsToInclude = <string[]>this.options.fieldsToInclude;\n    }\n\n    return {\n      ...query,\n      format: 'xlsx',\n      numberOfResults: this.options.numberOfResults\n    };\n  }\n\n  private downloadExcelFile(content: ArrayBuffer) {\n    const blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    const url = URL.createObjectURL(blob);\n\n    const a = createAnchor();\n    a.href = url;\n    a.download = this.buildExcelFileName();\n    a.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  private buildExcelFileName() {\n    const utc = moment().utc();\n    const year = utc.format('YYYY');\n    const month = utc.format('MM');\n    const day = utc.format('DD');\n    const hour = utc.format('HH');\n    const minute = utc.format('mm');\n    const second = utc.format('ss');\n\n    return `query--${year}-${month}-${day}--${hour}-${minute}-${second}.xlsx`;\n  }\n\n  static create(element: HTMLElement, options?: IExportToExcelOptions, root?: HTMLElement): ExportToExcel {\n    return new ExportToExcel(element, options, (<SearchInterface>get(root, SearchInterface)).getBindings());\n  }\n}\n\nInitialization.registerAutoCreateComponent(ExportToExcel);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ExportToExcel/ExportToExcel.ts"],"sourceRoot":""}