{"version":3,"sources":["RadioButton.min__45edc409d97327d59af1.js","./src/ui/FormWidgets/RadioButton.ts"],"names":["webpackJsonpCoveo__temporary","555","module","exports","94","__webpack_require__","Object","defineProperty","value","onChange","label","name","id","radioButton","this","buildContent","doExport","exportGlobally","RadioButton","reset","currentlySelected","isSelected","getRadio","checked","select","triggerChange","build","element","getElement","getValue","$$","find","getLabel","radioOption","className","radioInput","type","labelInput","for","text","on","append","el"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,KAMlBC,GACA,SAAUF,EAAQC,EAASE,GAEjC,YAEAC,QAAOC,eAAeJ,EAAS,cAAgBK,OAAO,GCdtD,WAEA,OACA,YAKA,aAgBE,WACSC,EACAC,EACAC,EACCC,OAHD,KAAAH,MAAA,SAAgDI,UAG/C,KAAAD,MAAA,GAHD,KAAAH,WACA,KAAAC,QACA,KAAAC,OACC,KAAAC,KAERE,KAAKC,eAmFT,MAtGS,GAAAC,SAAP,WACE,EAAAC,gBACEC,YAAaA,KAuBV,YAAAC,MAAP,WACE,GAAMC,GAAoBN,KAAKO,YAC/BP,MAAKQ,WAAWC,SAAU,EACtBH,GACFN,KAAKL,SAASK,OAQX,YAAAU,OAAP,SAAcC,OAAA,KAAAA,OAAA,EACZ,IAAML,GAAoBN,KAAKO,YAC/BP,MAAKQ,WAAWC,SAAU,GACrBH,GAAqBK,GACxBX,KAAKL,SAASK,OAQX,YAAAY,MAAP,WACE,MAAOZ,MAAKa,SAOP,YAAAC,WAAP,WACE,MAAOd,MAAKa,SAGP,YAAAE,SAAP,WACE,MAAOf,MAAKJ,OAOP,YAAAW,WAAP,WACE,MAAOP,MAAKQ,WAAWC,SAOlB,YAAAD,SAAP,WACE,MAAyB,GAAAQ,GAAGhB,KAAKa,SAASI,KAAK,UAO1C,YAAAC,SAAP,WACE,MAAyB,GAAAF,GAAGhB,KAAKa,SAASI,KAAK,UAGzC,YAAAhB,aAAR,sBACQkB,EAAc,EAAAH,GAAG,OAASI,UAAW,gBACrCC,EAAa,EAAAL,GAAG,SAAWM,KAAM,QAASzB,KAAMG,KAAKH,KAAMC,GAAIE,KAAKF,KACpEyB,EAAa,EAAAP,GAAG,SAAWI,UAAW,0BAA2BI,IAAKxB,KAAKF,IACjFyB,GAAWE,KAAKzB,KAAKJ,OACrByB,EAAWK,GAAG,SAAU,WACtB,EAAK/B,SAAS,KAGhBwB,EAAYQ,OAAON,EAAWO,IAC9BT,EAAYQ,OAAOJ,EAAWK,IAC9B5B,KAAKa,QAAUM,EAAYS,IAE/B,IAzGa,GAAAxB","file":"RadioButton.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([53],{\n\n/***/ 555:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dom_1 = __webpack_require__(1);\n__webpack_require__(555);\nvar GlobalExports_1 = __webpack_require__(3);\n/**\n * A radio button widget with standard styling.\n */\nvar RadioButton = /** @class */ (function () {\n    /**\n     * Creates a new `RadioButton`.\n     * @param onChange The function to call when the radio button value changes. This function takes the current\n     * `RadioButton` instance as an argument.\n     * @param label The label to display next to the radio button.\n     * @param name The value to set the `input` HTMLElement `name` attribute to.\n     */\n    function RadioButton(onChange, label, name, id) {\n        if (onChange === void 0) { onChange = function (radioButton) { }; }\n        if (id === void 0) { id = label; }\n        this.onChange = onChange;\n        this.label = label;\n        this.name = name;\n        this.id = id;\n        this.buildContent();\n    }\n    RadioButton.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            RadioButton: RadioButton\n        });\n    };\n    /**\n     * Resets the radio button.\n     */\n    RadioButton.prototype.reset = function () {\n        var currentlySelected = this.isSelected();\n        this.getRadio().checked = false;\n        if (currentlySelected) {\n            this.onChange(this);\n        }\n    };\n    /**\n     * Select the radio button\n     * @param triggerChange will trigger change event if specified and the radio button is not already selected\n     */\n    RadioButton.prototype.select = function (triggerChange) {\n        if (triggerChange === void 0) { triggerChange = true; }\n        var currentlySelected = this.isSelected();\n        this.getRadio().checked = true;\n        if (!currentlySelected && triggerChange) {\n            this.onChange(this);\n        }\n    };\n    /**\n     * Gets the element on which the radio button is bound.\n     * @returns {HTMLElement} The radio button element.\n     */\n    RadioButton.prototype.build = function () {\n        return this.element;\n    };\n    /**\n     * Gets the element on which the radio button is bound.\n     * @returns {HTMLElement} The radio button element.\n     */\n    RadioButton.prototype.getElement = function () {\n        return this.element;\n    };\n    RadioButton.prototype.getValue = function () {\n        return this.label;\n    };\n    /**\n     * Indicates whether the radio button is selected.\n     * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\n     */\n    RadioButton.prototype.isSelected = function () {\n        return this.getRadio().checked;\n    };\n    /**\n     * Gets the `input` element (the radio button itself).\n     * @returns {HTMLInputElement} The `input` element.\n     */\n    RadioButton.prototype.getRadio = function () {\n        return Dom_1.$$(this.element).find('input');\n    };\n    /**\n     * Gets the radio button [`label`]{@link RadioButton.label} element.\n     * @returns {HTMLLabelElement} The `label` element.\n     */\n    RadioButton.prototype.getLabel = function () {\n        return Dom_1.$$(this.element).find('label');\n    };\n    RadioButton.prototype.buildContent = function () {\n        var _this = this;\n        var radioOption = Dom_1.$$('div', { className: 'coveo-radio' });\n        var radioInput = Dom_1.$$('input', { type: 'radio', name: this.name, id: this.id });\n        var labelInput = Dom_1.$$('label', { className: 'coveo-radio-input-label', for: this.id });\n        labelInput.text(this.label);\n        radioInput.on('change', function () {\n            _this.onChange(_this);\n        });\n        radioOption.append(radioInput.el);\n        radioOption.append(labelInput.el);\n        this.element = radioOption.el;\n    };\n    return RadioButton;\n}());\nexports.RadioButton = RadioButton;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// RadioButton.min__45edc409d97327d59af1.js","import { $$ } from '../../utils/Dom';\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\nimport 'styling/vapor/_Radio';\nimport { exportGlobally } from '../../GlobalExports';\n\n/**\n * A radio button widget with standard styling.\n */\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\n  protected element: HTMLElement;\n\n  static doExport() {\n    exportGlobally({\n      RadioButton: RadioButton\n    });\n  }\n\n  /**\n   * Creates a new `RadioButton`.\n   * @param onChange The function to call when the radio button value changes. This function takes the current\n   * `RadioButton` instance as an argument.\n   * @param label The label to display next to the radio button.\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\n   */\n  constructor(\n    public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {},\n    public label: string,\n    public name: string,\n    private id: string = label\n  ) {\n    this.buildContent();\n  }\n\n  /**\n   * Resets the radio button.\n   */\n  public reset() {\n    const currentlySelected = this.isSelected();\n    this.getRadio().checked = false;\n    if (currentlySelected) {\n      this.onChange(this);\n    }\n  }\n\n  /**\n   * Select the radio button\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\n   */\n  public select(triggerChange = true) {\n    const currentlySelected = this.isSelected();\n    this.getRadio().checked = true;\n    if (!currentlySelected && triggerChange) {\n      this.onChange(this);\n    }\n  }\n\n  /**\n   * Gets the element on which the radio button is bound.\n   * @returns {HTMLElement} The radio button element.\n   */\n  public build(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Gets the element on which the radio button is bound.\n   * @returns {HTMLElement} The radio button element.\n   */\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getValue(): string {\n    return this.label;\n  }\n\n  /**\n   * Indicates whether the radio button is selected.\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\n   */\n  public isSelected(): boolean {\n    return this.getRadio().checked;\n  }\n\n  /**\n   * Gets the `input` element (the radio button itself).\n   * @returns {HTMLInputElement} The `input` element.\n   */\n  public getRadio(): HTMLInputElement {\n    return <HTMLInputElement>$$(this.element).find('input');\n  }\n\n  /**\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\n   * @returns {HTMLLabelElement} The `label` element.\n   */\n  public getLabel(): HTMLLabelElement {\n    return <HTMLLabelElement>$$(this.element).find('label');\n  }\n\n  private buildContent() {\n    const radioOption = $$('div', { className: 'coveo-radio' });\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.id });\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', for: this.id });\n    labelInput.text(this.label);\n    radioInput.on('change', () => {\n      this.onChange(this);\n    });\n\n    radioOption.append(radioInput.el);\n    radioOption.append(labelInput.el);\n    this.element = radioOption.el;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}