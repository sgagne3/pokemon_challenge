{"version":3,"sources":["Icon.min__45edc409d97327d59af1.js","./src/ui/Icon/Icon.ts"],"names":["webpackJsonpCoveo__temporary","188","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","result","Icon","ID","ComponentOptions","initComponentOptions","resolveResult","Assert","exists","TemplateFieldsEvaluator","evaluateFieldsToMatch","conditions","initialize","parentElement","removeChild","_this","possibleInternalQuickview","$$","find","Component","computeCssClassNameForType","Utils","isNullOrUndefined","QueryUtils","hasHTMLVersion","addClass","on","get","open","createIcon","el","info","FileTypes","searchInterface","getBindings","preprocessIconInfo","toggleClass","small","undefined","indexOf","icon","replace","setAttribute","caption","shouldDisplayLabel","appendChild","className","withLabel","labelValue","doExport","exportGlobally","buildStringOption","buildBooleanOption","buildLocalizedStringOption","buildFieldConditionOption","Initialization","registerAutoCreateComponent"],"mappings":"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","file":"Icon.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([81],{\n\n/***/ 188:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Assert_1 = __webpack_require__(5);\nvar QueryUtils_1 = __webpack_require__(21);\nvar Initialization_1 = __webpack_require__(2);\nvar Utils_1 = __webpack_require__(4);\nvar FileTypes_1 = __webpack_require__(113);\nvar Dom_1 = __webpack_require__(1);\nvar GlobalExports_1 = __webpack_require__(3);\nvar TemplateFieldsEvaluator_1 = __webpack_require__(132);\n/**\n * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\n * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\n * outputs a generic icon.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nvar Icon = /** @class */ (function (_super) {\n    __extends(Icon, _super);\n    /**\n     * Creates a new Icon component.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the Icon component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     * @param result The result to associate the component with.\n     */\n    function Icon(element, options, bindings, result) {\n        var _this = _super.call(this, element, Icon.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.result = result;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Icon, options);\n        _this.result = _this.result || _this.resolveResult();\n        Assert_1.Assert.exists(_this.result);\n        if (TemplateFieldsEvaluator_1.TemplateFieldsEvaluator.evaluateFieldsToMatch(_this.options.conditions, _this.result)) {\n            _this.initialize(element, bindings);\n        }\n        else if (_this.element.parentElement != null) {\n            _this.element.parentElement.removeChild(_this.element);\n        }\n        return _this;\n    }\n    Icon.prototype.initialize = function (element, bindings) {\n        var possibleInternalQuickview = Dom_1.$$(this.element).find('.' + Component_1.Component.computeCssClassNameForType('Quickview'));\n        if (!Utils_1.Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils_1.QueryUtils.hasHTMLVersion(this.result)) {\n            Dom_1.$$(this.element).addClass('coveo-with-quickview');\n            Dom_1.$$(this.element).on('click', function () {\n                var qv = Component_1.Component.get(possibleInternalQuickview);\n                qv.open();\n            });\n        }\n        Icon.createIcon(this.result, this.options, element, bindings);\n    };\n    Icon.createIcon = function (result, options, element, bindings) {\n        if (options === void 0) { options = {}; }\n        if (element === void 0) { element = Dom_1.$$('div').el; }\n        var info = FileTypes_1.FileTypes.get(result);\n        if (!bindings && result.searchInterface) {\n            // try to resolve results bindings automatically\n            bindings = result.searchInterface.getBindings();\n        }\n        info = Icon.preprocessIconInfo(options, info);\n        Dom_1.$$(element).toggleClass('coveo-small', options.small === true);\n        if (options.value != undefined) {\n            if (options.small === true) {\n                if (options.value.indexOf('-small') == -1) {\n                    info.icon += '-small';\n                }\n            }\n            if (options.small === false) {\n                if (options.value.indexOf('-small') != -1) {\n                    info.icon = info.icon.replace('-small', '');\n                }\n            }\n        }\n        Dom_1.$$(element).addClass(info.icon);\n        element.setAttribute('title', info.caption);\n        if (Icon.shouldDisplayLabel(options, bindings)) {\n            element.appendChild(Dom_1.$$('span', {\n                className: 'coveo-icon-caption-overlay'\n            }, info.caption).el);\n            Dom_1.$$(element).addClass('coveo-icon-with-caption-overlay');\n            Dom_1.$$(element).setAttribute('data-with-label', 'true');\n        }\n        return element;\n    };\n    Icon.shouldDisplayLabel = function (options, bindings) {\n        // If withLabel is explicitely set to false, the label will never display\n        // If withLabel is explicitely set to true, the label will always display\n        // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json\n        // with the property shouldDisplayLabel set on each file type/ objecttype\n        // In this case, the generated css will take care of outputting the correct css to display : block\n        return options.withLabel !== false;\n    };\n    Icon.preprocessIconInfo = function (options, info) {\n        if (options.labelValue != null) {\n            info.caption = options.labelValue;\n        }\n        if (options.value != null) {\n            info.icon = 'coveo-icon ' + options.value;\n        }\n        if (info.caption == null) {\n            info.caption = '';\n        }\n        if (info.icon == null) {\n            info.icon = 'coveo-icon coveo-sprites-custom';\n        }\n        return info;\n    };\n    Icon.ID = 'Icon';\n    Icon.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            Icon: Icon\n        });\n    };\n    /**\n     * The options for the Icon\n     * @componentOptions\n     */\n    Icon.options = {\n        /**\n         * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\n         *\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon\n         * depending on the result file type.\n         */\n        value: ComponentOptions_1.ComponentOptions.buildStringOption(),\n        /**\n         * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\n         *\n         * Default value is `undefined`.\n         */\n        small: ComponentOptions_1.ComponentOptions.buildBooleanOption(),\n        /**\n         * Specifies whether the Icon component should force the output icon to display its caption/label.\n         *\n         * **Note:**\n         *\n         * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for\n         * > Salesforce Insight Panels.\n         *\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon\n         * needs to display a caption/label depending on the result file type.\n         */\n        withLabel: ComponentOptions_1.ComponentOptions.buildBooleanOption(),\n        /**\n         * Specifies what text to display as the icon caption/label.\n         *\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon\n         * needs to display depending on the result file type.\n         */\n        labelValue: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\n        /**\n         * A field-based condition that must be satisfied by the query result item for the component to be rendered.\n         *\n         * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\n         *\n         * **Examples:**\n         * Render the component if the query result item's @documenttype field value is Article or Documentation.\n         * ```html\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\n         * ```\n         *\n         * Render the component if the query result item's @documenttype field value is anything but Case.\n         * ```html\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\n         * ```\n         * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\n         * ```html\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\n         * ```\n         * Default value is `undefined`.\n         */\n        conditions: ComponentOptions_1.ComponentOptions.buildFieldConditionOption()\n    };\n    return Icon;\n}(Component_1.Component));\nexports.Icon = Icon;\nInitialization_1.Initialization.registerAutoCreateComponent(Icon);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Icon.min__45edc409d97327d59af1.js","import { Component } from '../Base/Component';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IFieldConditionOption } from '../Base/IComponentOptions';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { Assert } from '../../misc/Assert';\nimport { QueryUtils } from '../../utils/QueryUtils';\nimport { Initialization } from '../Base/Initialization';\nimport { Utils } from '../../utils/Utils';\nimport { FileTypes, IFileTypeInfo } from '../Misc/FileTypes';\nimport { $$ } from '../../utils/Dom';\nimport { exportGlobally } from '../../GlobalExports';\nimport { TemplateFieldsEvaluator } from '../Templates/TemplateFieldsEvaluator';\n\n/**\n * Available options for the {@link Icon} component.\n */\nexport interface IIconOptions {\n  value?: string;\n  small?: boolean;\n  withLabel?: boolean;\n  labelValue?: string;\n  conditions?: IFieldConditionOption[];\n}\n\n/**\n * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\n * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\n * outputs a generic icon.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nexport class Icon extends Component {\n  static ID = 'Icon';\n\n  static doExport = () => {\n    exportGlobally({\n      Icon: Icon\n    });\n  };\n\n  /**\n   * The options for the Icon\n   * @componentOptions\n   */\n  static options: IIconOptions = {\n    /**\n     * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\n     *\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon\n     * depending on the result file type.\n     */\n    value: ComponentOptions.buildStringOption(),\n\n    /**\n     * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\n     *\n     * Default value is `undefined`.\n     */\n    small: ComponentOptions.buildBooleanOption(),\n\n    /**\n     * Specifies whether the Icon component should force the output icon to display its caption/label.\n     *\n     * **Note:**\n     *\n     * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for\n     * > Salesforce Insight Panels.\n     *\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon\n     * needs to display a caption/label depending on the result file type.\n     */\n    withLabel: ComponentOptions.buildBooleanOption(),\n\n    /**\n     * Specifies what text to display as the icon caption/label.\n     *\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon\n     * needs to display depending on the result file type.\n     */\n    labelValue: ComponentOptions.buildLocalizedStringOption(),\n\n    /**\n     * A field-based condition that must be satisfied by the query result item for the component to be rendered.\n     *\n     * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\n     *\n     * **Examples:**\n     * Render the component if the query result item's @documenttype field value is Article or Documentation.\n     * ```html\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\n     * ```\n     *\n     * Render the component if the query result item's @documenttype field value is anything but Case.\n     * ```html\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\n     * ```\n     * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\n     * ```html\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\n     * ```\n     * Default value is `undefined`.\n     */\n    conditions: ComponentOptions.buildFieldConditionOption()\n  };\n\n  /**\n   * Creates a new Icon component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the Icon component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param result The result to associate the component with.\n   */\n  constructor(public element: HTMLElement, public options?: IIconOptions, bindings?: IComponentBindings, public result?: IQueryResult) {\n    super(element, Icon.ID, bindings);\n\n    this.options = ComponentOptions.initComponentOptions(element, Icon, options);\n    this.result = this.result || this.resolveResult();\n    Assert.exists(this.result);\n\n    if (TemplateFieldsEvaluator.evaluateFieldsToMatch(this.options.conditions, this.result)) {\n      this.initialize(element, bindings);\n    } else if (this.element.parentElement != null) {\n      this.element.parentElement.removeChild(this.element);\n    }\n  }\n\n  private initialize(element: HTMLElement, bindings: IComponentBindings) {\n    const possibleInternalQuickview = $$(this.element).find('.' + Component.computeCssClassNameForType('Quickview'));\n    if (!Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils.hasHTMLVersion(this.result)) {\n      $$(this.element).addClass('coveo-with-quickview');\n      $$(this.element).on('click', () => {\n        const qv = <any>Component.get(possibleInternalQuickview);\n        qv.open();\n      });\n    }\n\n    Icon.createIcon(this.result, this.options, element, bindings);\n  }\n\n  static createIcon(result: IQueryResult, options: IIconOptions = {}, element: HTMLElement = $$('div').el, bindings?: IComponentBindings) {\n    let info = FileTypes.get(result);\n    if (!bindings && result.searchInterface) {\n      // try to resolve results bindings automatically\n      bindings = result.searchInterface.getBindings();\n    }\n    info = Icon.preprocessIconInfo(options, info);\n    $$(element).toggleClass('coveo-small', options.small === true);\n\n    if (options.value != undefined) {\n      if (options.small === true) {\n        if (options.value.indexOf('-small') == -1) {\n          info.icon += '-small';\n        }\n      }\n      if (options.small === false) {\n        if (options.value.indexOf('-small') != -1) {\n          info.icon = info.icon.replace('-small', '');\n        }\n      }\n    }\n    $$(element).addClass(info.icon);\n    element.setAttribute('title', info.caption);\n\n    if (Icon.shouldDisplayLabel(options, bindings)) {\n      element.appendChild(\n        $$(\n          'span',\n          {\n            className: 'coveo-icon-caption-overlay'\n          },\n          info.caption\n        ).el\n      );\n      $$(element).addClass('coveo-icon-with-caption-overlay');\n      $$(element).setAttribute('data-with-label', 'true');\n    }\n    return element;\n  }\n\n  static shouldDisplayLabel(options: IIconOptions, bindings: IComponentBindings) {\n    // If withLabel is explicitely set to false, the label will never display\n    // If withLabel is explicitely set to true, the label will always display\n    // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json\n    // with the property shouldDisplayLabel set on each file type/ objecttype\n    // In this case, the generated css will take care of outputting the correct css to display : block\n    return options.withLabel !== false;\n  }\n\n  static preprocessIconInfo(options: IIconOptions, info: IFileTypeInfo) {\n    if (options.labelValue != null) {\n      info.caption = options.labelValue;\n    }\n    if (options.value != null) {\n      info.icon = 'coveo-icon ' + options.value;\n    }\n    if (info.caption == null) {\n      info.caption = '';\n    }\n    if (info.icon == null) {\n      info.icon = 'coveo-icon coveo-sprites-custom';\n    }\n    return info;\n  }\n}\nInitialization.registerAutoCreateComponent(Icon);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Icon/Icon.ts"],"sourceRoot":""}