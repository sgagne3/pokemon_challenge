{"version":3,"sources":["CardOverlay.min__45edc409d97327d59af1.js","./src/ui/CardOverlay/CardOverlay.ts","./src/events/CardOverlayEvents.ts"],"names":["webpackJsonpCoveo__temporary","241","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","CardOverlay","ID","ComponentOptions","initComponentOptions","parentCard","$$","closest","Assert","exists","addClass","createOverlay","createButton","closeOverlay","_this","toggleOverlay","swtch","undefined","openOverlay","overlay","hasClass","removeClass","bind","trigger","CardOverlayEvents","openCardOverlay","closeCardOverlay","className","el","overlayHeader","appendChild","overlayBody","childNodes","length","firstChild","icon","SVGIcons","icons","arrowDown","SVGDom","addClassToSVGInContainer","overlayFooter","tabindex","on","KeyboardUtils","keypressAction","KEYBOARD","ENTER","Utils","toDashCase","title","setAttribute","doExport","exportGlobally","buildLocalizedStringOption","required","localizedString","l","buildIconOption","Component","Initialization","registerAutoCreateComponent","599","600"],"mappings":"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","file":"CardOverlay.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([46],{\n\n/***/ 241:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Initialization_1 = __webpack_require__(2);\nvar CardOverlayEvents_1 = __webpack_require__(599);\nvar Dom_1 = __webpack_require__(1);\nvar Assert_1 = __webpack_require__(5);\nvar KeyboardUtils_1 = __webpack_require__(25);\nvar GlobalExports_1 = __webpack_require__(3);\n__webpack_require__(600);\nvar SVGIcons_1 = __webpack_require__(12);\nvar SVGDom_1 = __webpack_require__(16);\nvar Utils_1 = __webpack_require__(4);\nvar Strings_1 = __webpack_require__(6);\n/**\n * The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\n * an {@link IQueryResult}. While this component typically populates a {@link CardActionBar} component, it is actually\n * possible to place a CardOverlay component anywhere in any result.\n *\n * The primary purpose of the CardOverlay component is to display additional information about a result in a format that\n * fits well within a card result layout (see [Result Layouts](https://docs.coveo.com/en/360/)).\n *\n * When initialized, this component creates a `<div class=\"coveo-card-overlay\">` element as the last child of its parent\n * IQueryResult, and displays a button which toggles the visibility of the overlay.\n */\nvar CardOverlay = /** @class */ (function (_super) {\n    __extends(CardOverlay, _super);\n    /**\n     * Creates a new CardOverlay component.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the CardOverlay component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     */\n    function CardOverlay(element, options, bindings) {\n        var _this = _super.call(this, element, CardOverlay.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, CardOverlay, options);\n        _this.parentCard = Dom_1.$$(_this.element).closest('.CoveoResult');\n        Assert_1.Assert.exists(_this.parentCard);\n        Dom_1.$$(_this.parentCard).addClass('coveo-with-card-overlay');\n        _this.createOverlay();\n        _this.createButton(_this.element);\n        _this.closeOverlay();\n        return _this;\n    }\n    /**\n     * Toggles the CardOverlay visibility.\n     *\n     * @param swtch Specifying a value for this parameter forces the component visibility to take the corresponding value\n     * (`true` for visible; `false` for hidden).\n     */\n    CardOverlay.prototype.toggleOverlay = function (swtch) {\n        if (swtch !== undefined) {\n            swtch ? this.openOverlay() : this.closeOverlay();\n        }\n        else {\n            if (Dom_1.$$(this.overlay).hasClass('coveo-opened')) {\n                this.closeOverlay();\n            }\n            else {\n                this.openOverlay();\n            }\n        }\n    };\n    /**\n     * Opens the CardOverlay.\n     *\n     * Also triggers the {@link CardOverlayEvents.openCardOverlay} event.\n     */\n    CardOverlay.prototype.openOverlay = function () {\n        Dom_1.$$(this.overlay).removeClass('coveo-hidden-for-tab-nav');\n        Dom_1.$$(this.overlay).addClass('coveo-opened');\n        Dom_1.$$(this.parentCard).addClass('coveo-card-overlay-opened');\n        this.bind.trigger(this.element, CardOverlayEvents_1.CardOverlayEvents.openCardOverlay);\n    };\n    /**\n     * Closes the CardOverlay.\n     *\n     * Also triggers the {@link CardOverlayEvents.closeCardOverlay} event.\n     */\n    CardOverlay.prototype.closeOverlay = function () {\n        Dom_1.$$(this.overlay).addClass('coveo-hidden-for-tab-nav');\n        Dom_1.$$(this.overlay).removeClass('coveo-opened');\n        Dom_1.$$(this.parentCard).removeClass('coveo-card-overlay-opened');\n        this.bind.trigger(this.element, CardOverlayEvents_1.CardOverlayEvents.closeCardOverlay);\n    };\n    CardOverlay.prototype.createOverlay = function () {\n        var _this = this;\n        this.overlay = Dom_1.$$('div', { className: 'coveo-card-overlay' }).el;\n        // Create header\n        var overlayHeader = Dom_1.$$('div', { className: 'coveo-card-overlay-header' }).el;\n        this.createButton(overlayHeader);\n        this.overlay.appendChild(overlayHeader);\n        // Create body\n        var overlayBody = Dom_1.$$('div', { className: 'coveo-card-overlay-body' }).el;\n        // Transfer all of element's children to the overlay\n        while (this.element.childNodes.length > 0) {\n            overlayBody.appendChild(this.element.firstChild);\n        }\n        this.overlay.appendChild(overlayBody);\n        // Create footer\n        var icon = Dom_1.$$('span', { className: 'coveo-icon coveo-open-card-overlay' }, SVGIcons_1.SVGIcons.icons.arrowDown);\n        SVGDom_1.SVGDom.addClassToSVGInContainer(icon.el, 'coveo-open-card-overlay-svg');\n        var overlayFooter = Dom_1.$$('div', { className: 'coveo-card-overlay-footer', tabindex: '0' }, icon.el);\n        overlayFooter.on('click', function () { return _this.toggleOverlay(false); });\n        this.bind.on(overlayFooter.el, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, function () { return _this.toggleOverlay(false); }));\n        this.overlay.appendChild(overlayFooter.el);\n        this.parentCard.appendChild(this.overlay);\n    };\n    CardOverlay.prototype.createButton = function (element) {\n        var _this = this;\n        if (this.options.icon) {\n            var icon = Dom_1.$$('span', { className: 'coveo-icon ' }, SVGIcons_1.SVGIcons.icons[this.options.icon]).el;\n            element.appendChild(icon);\n            SVGDom_1.SVGDom.addClassToSVGInContainer(element, \"coveo-\" + Utils_1.Utils.toDashCase(this.options.icon) + \"-svg\");\n        }\n        element.appendChild(Dom_1.$$('span', { className: 'coveo-label' }, this.options.title).el);\n        element.setAttribute('tabindex', '0');\n        Dom_1.$$(element).on('click', function () { return _this.toggleOverlay(); });\n        this.bind.on(element, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, function () { return _this.toggleOverlay(); }));\n    };\n    CardOverlay.ID = 'CardOverlay';\n    CardOverlay.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            CardOverlay: CardOverlay\n        });\n    };\n    /**\n     * @componentOptions\n     */\n    CardOverlay.options = {\n        /**\n         * Specifies the string to use for the overlay title and for the button text.\n         *\n         * Setting a value for this option is required for this component to work.\n         */\n        title: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({\n            required: true,\n            localizedString: function () { return Strings_1.l('NoTitle'); }\n        }),\n        /**\n         * Specifies the icon to use for the overlay icon and for the button icon.\n         *\n         * The name of the icon to use should be specified in dashed case. ie: facet-expand\n         */\n        icon: ComponentOptions_1.ComponentOptions.buildIconOption()\n    };\n    return CardOverlay;\n}(Component_1.Component));\nexports.CardOverlay = CardOverlay;\nInitialization_1.Initialization.registerAutoCreateComponent(CardOverlay);\n\n\n/***/ }),\n\n/***/ 599:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The CardOverlayEvents class contains string definitions for all events related to the {@link CardOverlay} component.\n */\nvar CardOverlayEvents = /** @class */ (function () {\n    function CardOverlayEvents() {\n    }\n    /**\n     * Opening a {@link CardOverlay} component triggers this event (see {@link CardOverlay.openOverlay}).\n     *\n     * @type {string}\n     */\n    CardOverlayEvents.openCardOverlay = 'openCardOverlay';\n    /**\n     * Closing a {@link CardOverlay} component triggers this event (see {@link CardOverlay.closeOverlay}).\n     *\n     * @type {string}\n     */\n    CardOverlayEvents.closeCardOverlay = 'closeCardOverlay';\n    return CardOverlayEvents;\n}());\nexports.CardOverlayEvents = CardOverlayEvents;\n\n\n/***/ }),\n\n/***/ 600:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// CardOverlay.min__45edc409d97327d59af1.js","import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { Initialization } from '../Base/Initialization';\nimport { CardOverlayEvents } from '../../events/CardOverlayEvents';\nimport { $$ } from '../../utils/Dom';\nimport { Assert } from '../../misc/Assert';\nimport { KeyboardUtils, KEYBOARD } from '../../utils/KeyboardUtils';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_CardOverlay';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { SVGDom } from '../../utils/SVGDom';\nimport { Utils } from '../../utils/Utils';\nimport { l } from '../../strings/Strings';\n\nexport interface ICardOverlayOptions {\n  title: string;\n  icon?: string;\n}\n\n/**\n * The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\n * an {@link IQueryResult}. While this component typically populates a {@link CardActionBar} component, it is actually\n * possible to place a CardOverlay component anywhere in any result.\n *\n * The primary purpose of the CardOverlay component is to display additional information about a result in a format that\n * fits well within a card result layout (see [Result Layouts](https://docs.coveo.com/en/360/)).\n *\n * When initialized, this component creates a `<div class=\"coveo-card-overlay\">` element as the last child of its parent\n * IQueryResult, and displays a button which toggles the visibility of the overlay.\n */\nexport class CardOverlay extends Component {\n  static ID = 'CardOverlay';\n\n  static doExport = () => {\n    exportGlobally({\n      CardOverlay: CardOverlay\n    });\n  };\n\n  private parentCard: HTMLElement;\n  private overlay: HTMLElement;\n\n  /**\n   * @componentOptions\n   */\n  static options: ICardOverlayOptions = {\n    /**\n     * Specifies the string to use for the overlay title and for the button text.\n     *\n     * Setting a value for this option is required for this component to work.\n     */\n    title: ComponentOptions.buildLocalizedStringOption({\n      required: true,\n      localizedString: () => l('NoTitle')\n    }),\n\n    /**\n     * Specifies the icon to use for the overlay icon and for the button icon.\n     *\n     * The name of the icon to use should be specified in dashed case. ie: facet-expand\n     */\n    icon: ComponentOptions.buildIconOption()\n  };\n\n  /**\n   * Creates a new CardOverlay component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the CardOverlay component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   */\n  constructor(public element: HTMLElement, public options?: ICardOverlayOptions, bindings?: IComponentBindings) {\n    super(element, CardOverlay.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, CardOverlay, options);\n\n    this.parentCard = $$(this.element).closest('.CoveoResult');\n    Assert.exists(this.parentCard);\n    $$(this.parentCard).addClass('coveo-with-card-overlay');\n    this.createOverlay();\n    this.createButton(this.element);\n    this.closeOverlay();\n  }\n\n  /**\n   * Toggles the CardOverlay visibility.\n   *\n   * @param swtch Specifying a value for this parameter forces the component visibility to take the corresponding value\n   * (`true` for visible; `false` for hidden).\n   */\n  public toggleOverlay(swtch?: boolean) {\n    if (swtch !== undefined) {\n      swtch ? this.openOverlay() : this.closeOverlay();\n    } else {\n      if ($$(this.overlay).hasClass('coveo-opened')) {\n        this.closeOverlay();\n      } else {\n        this.openOverlay();\n      }\n    }\n  }\n\n  /**\n   * Opens the CardOverlay.\n   *\n   * Also triggers the {@link CardOverlayEvents.openCardOverlay} event.\n   */\n  public openOverlay() {\n    $$(this.overlay).removeClass('coveo-hidden-for-tab-nav');\n    $$(this.overlay).addClass('coveo-opened');\n    $$(this.parentCard).addClass('coveo-card-overlay-opened');\n    this.bind.trigger(this.element, CardOverlayEvents.openCardOverlay);\n  }\n\n  /**\n   * Closes the CardOverlay.\n   *\n   * Also triggers the {@link CardOverlayEvents.closeCardOverlay} event.\n   */\n  public closeOverlay() {\n    $$(this.overlay).addClass('coveo-hidden-for-tab-nav');\n    $$(this.overlay).removeClass('coveo-opened');\n    $$(this.parentCard).removeClass('coveo-card-overlay-opened');\n    this.bind.trigger(this.element, CardOverlayEvents.closeCardOverlay);\n  }\n\n  private createOverlay() {\n    this.overlay = $$('div', { className: 'coveo-card-overlay' }).el;\n\n    // Create header\n    let overlayHeader = $$('div', { className: 'coveo-card-overlay-header' }).el;\n    this.createButton(overlayHeader);\n    this.overlay.appendChild(overlayHeader);\n\n    // Create body\n    let overlayBody = $$('div', { className: 'coveo-card-overlay-body' }).el;\n    // Transfer all of element's children to the overlay\n    while (this.element.childNodes.length > 0) {\n      overlayBody.appendChild(this.element.firstChild);\n    }\n    this.overlay.appendChild(overlayBody);\n\n    // Create footer\n    const icon = $$('span', { className: 'coveo-icon coveo-open-card-overlay' }, SVGIcons.icons.arrowDown);\n    SVGDom.addClassToSVGInContainer(icon.el, 'coveo-open-card-overlay-svg');\n    let overlayFooter = $$('div', { className: 'coveo-card-overlay-footer', tabindex: '0' }, icon.el);\n    overlayFooter.on('click', () => this.toggleOverlay(false));\n    this.bind.on(overlayFooter.el, 'keyup', KeyboardUtils.keypressAction(KEYBOARD.ENTER, () => this.toggleOverlay(false)));\n\n    this.overlay.appendChild(overlayFooter.el);\n\n    this.parentCard.appendChild(this.overlay);\n  }\n\n  private createButton(element: HTMLElement) {\n    if (this.options.icon) {\n      const icon = $$('span', { className: 'coveo-icon ' }, SVGIcons.icons[this.options.icon]).el;\n      element.appendChild(icon);\n      SVGDom.addClassToSVGInContainer(element, `coveo-${Utils.toDashCase(this.options.icon)}-svg`);\n    }\n    element.appendChild($$('span', { className: 'coveo-label' }, this.options.title).el);\n    element.setAttribute('tabindex', '0');\n    $$(element).on('click', () => this.toggleOverlay());\n    this.bind.on(element, 'keyup', KeyboardUtils.keypressAction(KEYBOARD.ENTER, () => this.toggleOverlay()));\n  }\n}\n\nInitialization.registerAutoCreateComponent(CardOverlay);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/CardOverlay/CardOverlay.ts","/**\n * The CardOverlayEvents class contains string definitions for all events related to the {@link CardOverlay} component.\n */\nexport class CardOverlayEvents {\n  /**\n   * Opening a {@link CardOverlay} component triggers this event (see {@link CardOverlay.openOverlay}).\n   *\n   * @type {string}\n   */\n  public static openCardOverlay = 'openCardOverlay';\n\n  /**\n   * Closing a {@link CardOverlay} component triggers this event (see {@link CardOverlay.closeOverlay}).\n   *\n   * @type {string}\n   */\n  public static closeCardOverlay = 'closeCardOverlay';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/CardOverlayEvents.ts"],"sourceRoot":""}