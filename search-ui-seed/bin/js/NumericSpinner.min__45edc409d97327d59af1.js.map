{"version":3,"sources":["NumericSpinner.min__45edc409d97327d59af1.js","./src/ui/FormWidgets/NumericSpinner.ts"],"names":["webpackJsonpCoveo__temporary","120","module","exports","__webpack_require__","Object","defineProperty","value","onChange","min","max","label","numericSpinner","this","buildContent","bindEvents","doExport","exportGlobally","NumericSpinner","reset","getSpinnerInput","getElement","element","getValue","getIntValue","parseInt","getFloatValue","parseFloat","setValue","toString","build","$$","className","numberInput","type","l","addOn","arrowUp","SVGIcons","icons","SVGDom","addClassToSVGInContainer","el","arrowDown","append","up","find","on","down","match"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEAC,QAAOC,eAAeH,EAAS,cAAgBI,OAAO,GCPtD,YACA,OACA,OACA,QACA,QAMA,aAkBE,WACSC,EACAC,EACAC,EACCC,OAHD,KAAAH,MAAA,SAAsDI,UACtD,KAAAH,MAAA,GADA,KAAAD,WACA,KAAAC,MACA,KAAAC,MACC,KAAAC,QAERE,KAAKC,eACLD,KAAKE,aA+GT,MApIgB,GAAAC,SAAd,WACE,EAAAC,gBACEC,eAAgBA,KAyBb,YAAAC,MAAP,WACEN,KAAKO,kBAAkBb,MAAQ,GAC/BM,KAAKL,SAASK,OAOT,YAAAQ,WAAP,WACE,MAAOR,MAAKS,SAOP,YAAAC,SAAP,WACE,MAAOV,MAAKO,kBAAkBb,OAOzB,YAAAiB,YAAP,WACE,MAAOX,MAAKO,kBAAkBb,MAAQkB,SAASZ,KAAKO,kBAAkBb,MAAO,IAAMM,KAAKJ,KAOnF,YAAAiB,cAAP,WACE,MAAOb,MAAKO,kBAAkBb,MAAQoB,WAAWd,KAAKO,kBAAkBb,OAASM,KAAKJ,KAUjF,YAAAmB,SAAP,SAAgBrB,GACVM,KAAKH,KAAOH,EAAQM,KAAKH,MAC3BH,EAAQM,KAAKH,KAEXH,EAAQM,KAAKJ,MACfF,EAAQM,KAAKJ,KAEfI,KAAKO,kBAAkBb,MAAQA,EAAMsB,WACrChB,KAAKL,SAASK,OAOT,YAAAiB,MAAP,WACE,MAAOjB,MAAKS,SAGN,YAAAR,aAAR,WACE,GAAMF,GAAiB,EAAAmB,GAAG,OAASC,UAAW,0BACxCC,EAAc,EAAAF,GAAG,SACrBC,UAAW,qBACXE,KAAM,OACN,aAAcrB,KAAKF,MAAQ,EAAAwB,EAAEtB,KAAKF,OAAS,KAGvCyB,EAAQ,EAAAL,GAAG,QAAUC,UAAW,iBAChCK,EAAU,EAAAN,GAAG,OAASC,UAAW,oBAAsB,EAAAM,SAASC,MAAMF,QAC5E,GAAAG,OAAOC,yBAAyBJ,EAAQK,GAAI,uBAC5C,IAAMC,GAAY,EAAAZ,GAAG,OAASC,UAAW,sBAAwB,EAAAM,SAASC,MAAMI,UAChF,GAAAH,OAAOC,yBAAyBE,EAAUD,GAAI,0BAC9CN,EAAMQ,OAAOP,EAAQK,IACrBN,EAAMQ,OAAOD,EAAUD,IACvB9B,EAAegC,OAAOX,EAAYS,IAClC9B,EAAegC,OAAOR,EAAMM,IAC5B7B,KAAKS,QAAUV,EAAe8B,IAGxB,YAAA3B,WAAR,sBACQ8B,EAAK,EAAAd,GAAGlB,KAAKS,SAASwB,KAAK,oBACjC,GAAAf,GAAGc,GAAIE,GAAG,QAAS,WACjB,EAAKnB,SAAS,EAAKF,gBAAkB,IAGvC,IAAMsB,GAAO,EAAAjB,GAAGlB,KAAKS,SAASwB,KAAK,sBACnC,GAAAf,GAAGiB,GAAMD,GAAG,QAAS,WACnB,EAAKnB,SAAS,EAAKF,gBAAkB,IAGvC,IAAMO,GAAgC,EAAAF,GAAGlB,KAAKS,SAASwB,KAAK,QAC5D,GAAAf,GAAGE,GAAac,GAAG,QAAS,WACtBd,EAAY1B,MAAM0C,MAAM,WAC1B,EAAKzC,SAAS,MAKZ,YAAAY,gBAAR,WACE,MAAyB,GAAAW,GAAGlB,KAAKS,SAASwB,KAAK,wBAEnD,IAxIa,GAAA5B","file":"NumericSpinner.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([82],{\n\n/***/ 120:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GlobalExports_1 = __webpack_require__(3);\nvar Strings_1 = __webpack_require__(6);\nvar Dom_1 = __webpack_require__(1);\nvar SVGDom_1 = __webpack_require__(16);\nvar SVGIcons_1 = __webpack_require__(12);\n/**\n * A numeric spinner widget with standard styling.\n */\nvar NumericSpinner = /** @class */ (function () {\n    /**\n     * Creates a new `NumericSpinner`.\n     * @param onChange The function to call when the numeric spinner value changes. This function takes the current\n     * `NumericSpinner` instance as an argument.\n     * @param min The minimum possible value of the numeric spinner.\n     * @param max The maximum possible value of the numeric spinner.\n     * @param label The label to use for the input for accessibility purposes.\n     */\n    function NumericSpinner(onChange, min, max, label) {\n        if (onChange === void 0) { onChange = function (numericSpinner) { }; }\n        if (min === void 0) { min = 0; }\n        this.onChange = onChange;\n        this.min = min;\n        this.max = max;\n        this.label = label;\n        this.buildContent();\n        this.bindEvents();\n    }\n    NumericSpinner.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            NumericSpinner: NumericSpinner\n        });\n    };\n    /**\n     * Resets the numeric spinner.\n     */\n    NumericSpinner.prototype.reset = function () {\n        this.getSpinnerInput().value = '';\n        this.onChange(this);\n    };\n    /**\n     * Gets the element on which the numeric spinner is bound.\n     * @returns {HTMLInputElement} The numeric spinner element.\n     */\n    NumericSpinner.prototype.getElement = function () {\n        return this.element;\n    };\n    /**\n     * Gets the numeric spinner currently selected value (as a string).\n     * @returns {string} The numeric spinner value.\n     */\n    NumericSpinner.prototype.getValue = function () {\n        return this.getSpinnerInput().value;\n    };\n    /**\n     * Gets the numeric spinner currently selected value (as an integer).\n     * @returns {number} The numeric spinner value.\n     */\n    NumericSpinner.prototype.getIntValue = function () {\n        return this.getSpinnerInput().value ? parseInt(this.getSpinnerInput().value, 10) : this.min;\n    };\n    /**\n     * Gets the numeric spinner currently selected value (as a float).\n     * @returns {number} The numeric spinner value.\n     */\n    NumericSpinner.prototype.getFloatValue = function () {\n        return this.getSpinnerInput().value ? parseFloat(this.getSpinnerInput().value) : this.min;\n    };\n    /**\n     * Sets the numeric spinner value.\n     *\n     * @param value The value to set the numeric spinner to. If `value` is greater than [`max`]{@link NumericSpinner.max},\n     * this method sets the numeric spinner to its maximum value instead. Likewise, if value is lesser than\n     * [`min`]{@link NumericSpinner.min}, the method sets the numeric spinner to its minimum value.\n     */\n    NumericSpinner.prototype.setValue = function (value) {\n        if (this.max && value > this.max) {\n            value = this.max;\n        }\n        if (value < this.min) {\n            value = this.min;\n        }\n        this.getSpinnerInput().value = value.toString();\n        this.onChange(this);\n    };\n    /**\n     * Gets the element on which the numeric spinner is bound.\n     * @returns {HTMLInputElement} The numeric spinner element.\n     */\n    NumericSpinner.prototype.build = function () {\n        return this.element;\n    };\n    NumericSpinner.prototype.buildContent = function () {\n        var numericSpinner = Dom_1.$$('div', { className: 'coveo-numeric-spinner' });\n        var numberInput = Dom_1.$$('input', {\n            className: 'coveo-number-input',\n            type: 'text',\n            'aria-label': this.label ? Strings_1.l(this.label) : ''\n        });\n        var addOn = Dom_1.$$('span', { className: 'coveo-add-on' });\n        var arrowUp = Dom_1.$$('div', { className: 'coveo-spinner-up' }, SVGIcons_1.SVGIcons.icons.arrowUp);\n        SVGDom_1.SVGDom.addClassToSVGInContainer(arrowUp.el, 'coveo-spinner-up-svg');\n        var arrowDown = Dom_1.$$('div', { className: 'coveo-spinner-down' }, SVGIcons_1.SVGIcons.icons.arrowDown);\n        SVGDom_1.SVGDom.addClassToSVGInContainer(arrowDown.el, 'coveo-spinner-down-svg');\n        addOn.append(arrowUp.el);\n        addOn.append(arrowDown.el);\n        numericSpinner.append(numberInput.el);\n        numericSpinner.append(addOn.el);\n        this.element = numericSpinner.el;\n    };\n    NumericSpinner.prototype.bindEvents = function () {\n        var _this = this;\n        var up = Dom_1.$$(this.element).find('.coveo-spinner-up');\n        Dom_1.$$(up).on('click', function () {\n            _this.setValue(_this.getFloatValue() + 1);\n        });\n        var down = Dom_1.$$(this.element).find('.coveo-spinner-down');\n        Dom_1.$$(down).on('click', function () {\n            _this.setValue(_this.getFloatValue() - 1);\n        });\n        var numberInput = Dom_1.$$(this.element).find('input');\n        Dom_1.$$(numberInput).on('input', function () {\n            if (numberInput.value.match(/[0-9]*/)) {\n                _this.onChange(_this);\n            }\n        });\n    };\n    NumericSpinner.prototype.getSpinnerInput = function () {\n        return Dom_1.$$(this.element).find('.coveo-number-input');\n    };\n    return NumericSpinner;\n}());\nexports.NumericSpinner = NumericSpinner;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// NumericSpinner.min__45edc409d97327d59af1.js","import { exportGlobally } from '../../GlobalExports';\nimport { l } from '../../strings/Strings';\nimport { $$ } from '../../utils/Dom';\nimport { SVGDom } from '../../utils/SVGDom';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { IFormWidget, IFormWidgetSettable } from './FormWidgets';\n\n/**\n * A numeric spinner widget with standard styling.\n */\nexport class NumericSpinner implements IFormWidget, IFormWidgetSettable {\n  private element: HTMLElement;\n  public name: string;\n\n  public static doExport() {\n    exportGlobally({\n      NumericSpinner: NumericSpinner\n    });\n  }\n\n  /**\n   * Creates a new `NumericSpinner`.\n   * @param onChange The function to call when the numeric spinner value changes. This function takes the current\n   * `NumericSpinner` instance as an argument.\n   * @param min The minimum possible value of the numeric spinner.\n   * @param max The maximum possible value of the numeric spinner.\n   * @param label The label to use for the input for accessibility purposes.\n   */\n  constructor(\n    public onChange: (numericSpinner: NumericSpinner) => void = (numericSpinner: NumericSpinner) => {},\n    public min: number = 0,\n    public max?: number,\n    private label?: string\n  ) {\n    this.buildContent();\n    this.bindEvents();\n  }\n\n  /**\n   * Resets the numeric spinner.\n   */\n  public reset() {\n    this.getSpinnerInput().value = '';\n    this.onChange(this);\n  }\n\n  /**\n   * Gets the element on which the numeric spinner is bound.\n   * @returns {HTMLInputElement} The numeric spinner element.\n   */\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as a string).\n   * @returns {string} The numeric spinner value.\n   */\n  public getValue(): string {\n    return this.getSpinnerInput().value;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as an integer).\n   * @returns {number} The numeric spinner value.\n   */\n  public getIntValue(): number {\n    return this.getSpinnerInput().value ? parseInt(this.getSpinnerInput().value, 10) : this.min;\n  }\n\n  /**\n   * Gets the numeric spinner currently selected value (as a float).\n   * @returns {number} The numeric spinner value.\n   */\n  public getFloatValue(): number {\n    return this.getSpinnerInput().value ? parseFloat(this.getSpinnerInput().value) : this.min;\n  }\n\n  /**\n   * Sets the numeric spinner value.\n   *\n   * @param value The value to set the numeric spinner to. If `value` is greater than [`max`]{@link NumericSpinner.max},\n   * this method sets the numeric spinner to its maximum value instead. Likewise, if value is lesser than\n   * [`min`]{@link NumericSpinner.min}, the method sets the numeric spinner to its minimum value.\n   */\n  public setValue(value: number) {\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    if (value < this.min) {\n      value = this.min;\n    }\n    this.getSpinnerInput().value = value.toString();\n    this.onChange(this);\n  }\n\n  /**\n   * Gets the element on which the numeric spinner is bound.\n   * @returns {HTMLInputElement} The numeric spinner element.\n   */\n  public build() {\n    return this.element;\n  }\n\n  private buildContent() {\n    const numericSpinner = $$('div', { className: 'coveo-numeric-spinner' });\n    const numberInput = $$('input', {\n      className: 'coveo-number-input',\n      type: 'text',\n      'aria-label': this.label ? l(this.label) : ''\n    });\n\n    const addOn = $$('span', { className: 'coveo-add-on' });\n    const arrowUp = $$('div', { className: 'coveo-spinner-up' }, SVGIcons.icons.arrowUp);\n    SVGDom.addClassToSVGInContainer(arrowUp.el, 'coveo-spinner-up-svg');\n    const arrowDown = $$('div', { className: 'coveo-spinner-down' }, SVGIcons.icons.arrowDown);\n    SVGDom.addClassToSVGInContainer(arrowDown.el, 'coveo-spinner-down-svg');\n    addOn.append(arrowUp.el);\n    addOn.append(arrowDown.el);\n    numericSpinner.append(numberInput.el);\n    numericSpinner.append(addOn.el);\n    this.element = numericSpinner.el;\n  }\n\n  private bindEvents() {\n    const up = $$(this.element).find('.coveo-spinner-up');\n    $$(up).on('click', () => {\n      this.setValue(this.getFloatValue() + 1);\n    });\n\n    const down = $$(this.element).find('.coveo-spinner-down');\n    $$(down).on('click', () => {\n      this.setValue(this.getFloatValue() - 1);\n    });\n\n    const numberInput = <HTMLInputElement>$$(this.element).find('input');\n    $$(numberInput).on('input', () => {\n      if (numberInput.value.match(/[0-9]*/)) {\n        this.onChange(this);\n      }\n    });\n  }\n\n  private getSpinnerInput(): HTMLInputElement {\n    return <HTMLInputElement>$$(this.element).find('.coveo-number-input');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/NumericSpinner.ts"],"sourceRoot":""}