{"version":3,"sources":["Dropdown.min__45edc409d97327d59af1.js","./src/ui/FormWidgets/Dropdown.ts"],"names":["webpackJsonpCoveo__temporary","62","module","exports","__webpack_require__","Object","defineProperty","value","onChange","listOfValues","getDisplayValue","label","dropdown","l","optionsElement","this","buildContent","select","bindEvents","doExport","exportGlobally","Dropdown","reset","setId","id","$$","element","setAttribute","getElement","getValue","selectElement","index","executeOnChange","selectOption","build","setValue","_","each","option","getAttribute","className","el","selectOptions","buildOptions","opt","append","ret","push","buildOption","text","on"],"mappings":"AAAAA,8BAA8B,KAExBC,GACA,SAAUC,EAAQC,EAASC,GAEjC,YAEAC,QAAOC,eAAeH,EAAS,cAAgBI,OAAO,GCPtD,YACA,OACA,OAEA,OAKA,aAoBE,WACSC,EACGC,EACFC,EACAC,OAHD,KAAAH,MAAA,SAA0CI,UAEzC,KAAAF,MAAsC,EAAAG,GAFvC,KAAAL,WACG,KAAAC,eACF,KAAAC,kBACA,KAAAC,QArBF,KAAAG,kBAuBNC,KAAKC,eACLD,KAAKE,OAAO,GAAG,GACfF,KAAKG,aAuGT,MA9HS,GAAAC,SAAP,WACE,EAAAC,gBACEC,SAAUA,KA2BP,YAAAC,MAAP,WACEP,KAAKE,OAAO,GAAG,IAGV,YAAAM,MAAP,SAAaC,GACX,EAAAC,GAAGV,KAAKW,SAASC,aAAa,KAAMH,IAO/B,YAAAI,WAAP,WACE,MAAOb,MAAKW,SAOP,YAAAG,SAAP,WACE,MAAOd,MAAKe,cAAcvB,OASrB,YAAAU,OAAP,SAAcc,EAAeC,OAAA,KAAAA,OAAA,GAC3BjB,KAAKkB,aAAalB,KAAKD,eAAeiB,GAAQC,IAOzC,YAAAE,MAAP,WACE,MAAOnB,MAAKW,SAOP,YAAAS,SAAP,SAAgB5B,GAAhB,UACE6B,GAAEC,KAAKtB,KAAKD,eAAgB,SAAAwB,GACtB,EAAAb,GAAGa,GAAQC,aAAa,eAAiBhC,GAC3C,EAAK0B,aAAaK,MAKhB,YAAAL,aAAR,SAAqBK,EAA2BN,OAAA,KAAAA,OAAA,GAC9CjB,KAAKe,cAAcvB,MAAQ+B,EAAO/B,MAC9ByB,GACFjB,KAAKP,SAASO,OAIV,YAAAC,aAAR,qBACED,MAAKe,cAAmC,EAAAL,GAAG,UACzCe,UAAW,mBACVC,GAEC1B,KAAKJ,OACPI,KAAKe,cAAcH,aAAa,aAAc,EAAAd,EAAEE,KAAKJ,OAGvD,IAAM+B,GAAgB3B,KAAK4B,cAC3BP,GAAEC,KAAKK,EAAe,SAAAE,GACpB,EAAAnB,GAAG,EAAKK,eAAee,OAAOD,KAEhC7B,KAAKW,QAAUX,KAAKe,eAGd,YAAAa,aAAR,sBACQG,IAIN,OAHAV,GAAEC,KAAKtB,KAAKN,aAAc,SAACF,GACzBuC,EAAIC,KAAK,EAAKC,YAAYzC,MAErBuC,GAGD,YAAAE,YAAR,SAAoBzC,GAClB,GAAM+B,GAAS,EAAAb,GAAG,SAKlB,OAJAa,GAAOX,aAAa,aAAcpB,GAClC+B,EAAOX,aAAa,QAASpB,GAC7B+B,EAAOW,KAAKlC,KAAKL,gBAAgBH,IACjCQ,KAAKD,eAAeiC,KAAwBT,EAAOG,IAC5CH,EAAOG,IAGR,YAAAvB,WAAR,qBACE,GAAAO,GAAGV,KAAKe,eAAeoB,GAAG,SAAU,WAAM,SAAK1C,SAAS,MAE5D,IAnIa,GAAAa","file":"Dropdown.min__45edc409d97327d59af1.js","sourcesContent":["webpackJsonpCoveo__temporary([83],{\n\n/***/ 62:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dom_1 = __webpack_require__(1);\nvar Strings_1 = __webpack_require__(6);\nvar _ = __webpack_require__(0);\nvar GlobalExports_1 = __webpack_require__(3);\n/**\n * A dropdown widget with standard styling.\n */\nvar Dropdown = /** @class */ (function () {\n    /**\n     * Creates a new `Dropdown`.\n     * @param onChange The function to call when the dropdown selected value changes. This function takes the current\n     * `Dropdown` instance as an argument.\n     * @param listOfValues The selectable values to display in the dropdown.\n     * @param getDisplayValue An optional function to modify the display values, rather than using the values as they\n     * appear in the `listOfValues`.\n     * @param label The label to use for the input for accessibility purposes.\n     */\n    function Dropdown(onChange, listOfValues, getDisplayValue, label) {\n        if (onChange === void 0) { onChange = function (dropdown) { }; }\n        if (getDisplayValue === void 0) { getDisplayValue = Strings_1.l; }\n        this.onChange = onChange;\n        this.listOfValues = listOfValues;\n        this.getDisplayValue = getDisplayValue;\n        this.label = label;\n        this.optionsElement = [];\n        this.buildContent();\n        this.select(0, false);\n        this.bindEvents();\n    }\n    Dropdown.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            Dropdown: Dropdown\n        });\n    };\n    /**\n     * Resets the dropdown.\n     */\n    Dropdown.prototype.reset = function () {\n        this.select(0, false);\n    };\n    Dropdown.prototype.setId = function (id) {\n        Dom_1.$$(this.element).setAttribute('id', id);\n    };\n    /**\n     * Gets the element on which the dropdown is bound.\n     * @returns {HTMLElement} The dropdown element.\n     */\n    Dropdown.prototype.getElement = function () {\n        return this.element;\n    };\n    /**\n     * Gets the currently selected dropdown value.\n     * @returns {string} The currently selected dropdown value.\n     */\n    Dropdown.prototype.getValue = function () {\n        return this.selectElement.value;\n    };\n    /**\n     * Selects a value from the dropdown [`listofValues`]{@link Dropdown.listOfValues}.\n     * @param index The 0-based index position of the value to select in the `listOfValues`.\n     * @param executeOnChange Indicates whether to execute the [`onChange`]{@link Dropdown.onChange} function when this\n     * method changes the dropdown selection.\n     */\n    Dropdown.prototype.select = function (index, executeOnChange) {\n        if (executeOnChange === void 0) { executeOnChange = true; }\n        this.selectOption(this.optionsElement[index], executeOnChange);\n    };\n    /**\n     * Gets the element on which the dropdown is bound.\n     * @returns {HTMLElement} The dropdown element.\n     */\n    Dropdown.prototype.build = function () {\n        return this.element;\n    };\n    /**\n     * Sets the dropdown value.\n     * @param value The value to set the dropdown to.\n     */\n    Dropdown.prototype.setValue = function (value) {\n        var _this = this;\n        _.each(this.optionsElement, function (option) {\n            if (Dom_1.$$(option).getAttribute('data-value') == value) {\n                _this.selectOption(option);\n            }\n        });\n    };\n    Dropdown.prototype.selectOption = function (option, executeOnChange) {\n        if (executeOnChange === void 0) { executeOnChange = true; }\n        this.selectElement.value = option.value;\n        if (executeOnChange) {\n            this.onChange(this);\n        }\n    };\n    Dropdown.prototype.buildContent = function () {\n        var _this = this;\n        this.selectElement = Dom_1.$$('select', {\n            className: 'coveo-dropdown'\n        }).el;\n        if (this.label) {\n            this.selectElement.setAttribute('aria-label', Strings_1.l(this.label));\n        }\n        var selectOptions = this.buildOptions();\n        _.each(selectOptions, function (opt) {\n            Dom_1.$$(_this.selectElement).append(opt);\n        });\n        this.element = this.selectElement;\n    };\n    Dropdown.prototype.buildOptions = function () {\n        var _this = this;\n        var ret = [];\n        _.each(this.listOfValues, function (value) {\n            ret.push(_this.buildOption(value));\n        });\n        return ret;\n    };\n    Dropdown.prototype.buildOption = function (value) {\n        var option = Dom_1.$$('option');\n        option.setAttribute('data-value', value);\n        option.setAttribute('value', value);\n        option.text(this.getDisplayValue(value));\n        this.optionsElement.push(option.el);\n        return option.el;\n    };\n    Dropdown.prototype.bindEvents = function () {\n        var _this = this;\n        Dom_1.$$(this.selectElement).on('change', function () { return _this.onChange(_this); });\n    };\n    return Dropdown;\n}());\nexports.Dropdown = Dropdown;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Dropdown.min__45edc409d97327d59af1.js","import { $$ } from '../../utils/Dom';\nimport { l } from '../../strings/Strings';\nimport * as _ from 'underscore';\nimport { IFormWidget, IFormWidgetSettable } from './FormWidgets';\nimport { exportGlobally } from '../../GlobalExports';\n\n/**\n * A dropdown widget with standard styling.\n */\nexport class Dropdown implements IFormWidget, IFormWidgetSettable {\n  private element: HTMLElement;\n  private selectElement: HTMLSelectElement;\n  private optionsElement: HTMLOptionElement[] = [];\n\n  static doExport() {\n    exportGlobally({\n      Dropdown: Dropdown\n    });\n  }\n\n  /**\n   * Creates a new `Dropdown`.\n   * @param onChange The function to call when the dropdown selected value changes. This function takes the current\n   * `Dropdown` instance as an argument.\n   * @param listOfValues The selectable values to display in the dropdown.\n   * @param getDisplayValue An optional function to modify the display values, rather than using the values as they\n   * appear in the `listOfValues`.\n   * @param label The label to use for the input for accessibility purposes.\n   */\n  constructor(\n    public onChange: (dropdown: Dropdown) => void = (dropdown: Dropdown) => {},\n    protected listOfValues: string[],\n    private getDisplayValue: (string) => string = l,\n    private label?: string\n  ) {\n    this.buildContent();\n    this.select(0, false);\n    this.bindEvents();\n  }\n\n  /**\n   * Resets the dropdown.\n   */\n  public reset() {\n    this.select(0, false);\n  }\n\n  public setId(id: string) {\n    $$(this.element).setAttribute('id', id);\n  }\n\n  /**\n   * Gets the element on which the dropdown is bound.\n   * @returns {HTMLElement} The dropdown element.\n   */\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Gets the currently selected dropdown value.\n   * @returns {string} The currently selected dropdown value.\n   */\n  public getValue(): string {\n    return this.selectElement.value;\n  }\n\n  /**\n   * Selects a value from the dropdown [`listofValues`]{@link Dropdown.listOfValues}.\n   * @param index The 0-based index position of the value to select in the `listOfValues`.\n   * @param executeOnChange Indicates whether to execute the [`onChange`]{@link Dropdown.onChange} function when this\n   * method changes the dropdown selection.\n   */\n  public select(index: number, executeOnChange = true) {\n    this.selectOption(this.optionsElement[index], executeOnChange);\n  }\n\n  /**\n   * Gets the element on which the dropdown is bound.\n   * @returns {HTMLElement} The dropdown element.\n   */\n  public build() {\n    return this.element;\n  }\n\n  /**\n   * Sets the dropdown value.\n   * @param value The value to set the dropdown to.\n   */\n  public setValue(value: string) {\n    _.each(this.optionsElement, option => {\n      if ($$(option).getAttribute('data-value') == value) {\n        this.selectOption(option);\n      }\n    });\n  }\n\n  private selectOption(option: HTMLOptionElement, executeOnChange = true) {\n    this.selectElement.value = option.value;\n    if (executeOnChange) {\n      this.onChange(this);\n    }\n  }\n\n  private buildContent() {\n    this.selectElement = <HTMLSelectElement>$$('select', {\n      className: 'coveo-dropdown'\n    }).el;\n\n    if (this.label) {\n      this.selectElement.setAttribute('aria-label', l(this.label));\n    }\n\n    const selectOptions = this.buildOptions();\n    _.each(selectOptions, opt => {\n      $$(this.selectElement).append(opt);\n    });\n    this.element = this.selectElement;\n  }\n\n  private buildOptions(): HTMLElement[] {\n    const ret: HTMLElement[] = [];\n    _.each(this.listOfValues, (value: string) => {\n      ret.push(this.buildOption(value));\n    });\n    return ret;\n  }\n\n  private buildOption(value: string): HTMLElement {\n    const option = $$('option');\n    option.setAttribute('data-value', value);\n    option.setAttribute('value', value);\n    option.text(this.getDisplayValue(value));\n    this.optionsElement.push(<HTMLOptionElement>option.el);\n    return option.el;\n  }\n\n  private bindEvents() {\n    $$(this.selectElement).on('change', () => this.onChange(this));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/Dropdown.ts"],"sourceRoot":""}